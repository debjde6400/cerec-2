from python.ceg.ExtractionAlgorithm import ExtractionAlgorithm
from python.sentence.StanfordCoreNLP_ann import CoreNLPAnnotator

class CausalPhrase:  #extends ICausalElement {

  '''/**
   * The verbose phrase conveying the causal element
   */
  private String phrase;

  /**
   * This attribute indicates, whether the phrase was generated by an extraction algorithm
   * or manually written by a user. In the first case contractions will be distanced from their
   * root word
   */
  private boolean generated;'''

  def __init__(self, phrase):
    self.phrase = phrase   # may also be a list of phrases
    self.generated = False

  def getPhrase(self):
    return self.phrase

  def setPhrase(self, phrase):
    self.phrase = phrase

  def isGenerated(self):
    return self.generated

  def setGenerated(self, generated):
    self.generated = generated

  #@Override
  def createPattern(self, sentence, extractionAlgorithmGenerator):
    from python.ceg.CausalPhrasePlaceholder import CausalPhrasePlaceholder
    command = extractionAlgorithmGenerator.generateCommandPattern(sentence, self.phrase)
    
    if command is not None:
      extractor = ExtractionAlgorithm(command)
      return CausalPhrasePlaceholder([extractor])
    
    else:
      extractionAlgorithmGenerator.printDirectOrFile("Generating an extraction algorithm failed for a particular phrase:")
      extractionAlgorithmGenerator.printDirectOrFile(" - Sentence: '" + sentence.toString() + "'")
      extractionAlgorithmGenerator.printDirectOrFile(" - Phrase: '" + self.phrase + "'")
      return None

  #@Override
  def isComplete(self):
    return (self.phrase is not None)

  #@Override
  def resolvePattern(self, root): #{
    # the existence of causal phrases indicates, that this ceg is an actual ceg and not a pattern
    return None

  #@Override
  def __eq__(self, other):
    if isinstance(other, CausalPhrase):
      otherPhrase = other.getPhrase()     #true);
      if(otherPhrase == self.phrase):   #//true)))
        return True

    return False
  
  def matchResolved(self, other, url):
    # here self.phrase is list and other.phrase is of type str
    otherPhrase = other.getPhrase()
    #otherPhrase = Utils.breakWordsAccToParsing(otherPhrase)
    #otherPhrase = Utils.resolveContractions(otherPhrase, True)
    #otherPhrase = Utils.resolvePunctuations(otherPhrase, True)
    otherPhrase = ' '.join(CoreNLPAnnotator(url).tokenize_sent(otherPhrase))
    
    for p in self.phrase:
      if(otherPhrase == p):
        return True
      
    return False

  def toString(self, pattern=False, indent=''):             #(boolean pattern, String indent) {
    if(not pattern):
      return indent + str(self.phrase)

    else:
      return indent + "(phrase)"

  #@Override
  def __str__(self):
    return self.toString(False, '')