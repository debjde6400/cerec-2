package jfr.cerec.pattern;

import java.util.ArrayList;

import jfr.cerec.ceg.ICauseEffectGraph;
import jfr.cerec.ceg.Extractor;
import jfr.cerec.sentence.ISentence;

/**
 * 
 * @author Julian Frattini
 *
 * Interface to causality patterns: Each pattern contains 
 *  - index : number for identification
 *  - sentence structure : the structure of a sentence to check compliance with this pattern
 *  - cause-effect-pattern : pattern containing the genetic algorithms to extract cause-/effect-expressions
 *  - accepted sentences : list of already approved sentences
 */

public interface IPattern {
	
	/**
	 * Gets the index of this causality pattern
	 * @return The index of this causality pattern
	 */
	public int getIndex();
	
	/**
	 * Gets the sentence structure, which identifies this pattern
	 * @return The sentence structure of this causality pattern
	 */
	public IStructure getStructure();
	
	public void setStructure(IStructure structure);
	
	/**
	 * Gets the generation pattern, which contains the extraction algorithms
	 * @return The generation pattern of this causality pattern
	 */
	public Extractor getGenerationPattern();
	
	public void setGenerationPattern(Extractor extractor);
	
	/**
	 * Gets the list of already accepted and approved sentences to this causality pattern
	 * @return List of accepted sentences
	 */
	public ArrayList<ISentence> getAccepted();
	
	public void setAccepted(ArrayList<ISentence> accepted);
	
	/**
	 * Checks if a sentence is compliant to the pattern
	 * @param candidate Sentence under test
	 * @return True, if the inner nodes of the sentence equal the sentence structure associated with this pattern
	 */
	public boolean isCompliant(ISentence candidate);
	
	/**
	 * Checks whether a sentence is applicable to the pattern in that the associated extraction algorithms generate the desired cause effect graph
	 * @param candidate The sentence, which is seemingly compliant to the pattern
	 * @param ceg The cause-effect-graph, which describes the causality relation of the sentence
	 * @return True, if the cause-effect-graph generated by the pattern matches the one given
	 */
	public boolean isApplicable(ISentence candidate, ICauseEffectGraph ceg);
	
	/**
	 * Checks whether a sentence is compliant as well as applicable to the pattern
	 * @param candidate The sentence which shall match the pattern
	 * @param ceg The cause-effect-graph, which describes the causality relation of the sentence
	 * @return True, if the sentence is compliant and applicable to the pattern
	 */
	public boolean matches(ISentence candidate, ICauseEffectGraph ceg);
	
	/**
	 * Calculates the precision score of a pattern, which indicates, how many nodes of the accepted sentences have
	 * been used for the structure graph
	 * @return A score (of value in [0; 1]) of how precisely defined the patterns structure currently is
	 */
	public double getPrecisionScore();
	
	/**
	 * Adds a new sentence to the list of approved sentences
	 * @param candidate Sentence which is compliant to this pattern
	 */
	public void addSentence(ISentence candidate);
	
	/**
	 * Generates the cause-effect-graph of a compliant sentence
	 * @param sentence Sentence which is compliant to this pattern
	 * @return The cause-effect-graph, which represents the causal relation of the given sentence
	 */
	public ICauseEffectGraph generateCauseEffectGraph(ISentence sentence);
	
	/**
	 * Attempt to differentiate the pattern from the intruder by integrating constraints to the sentence structure
	 * @param intruder The sentence, that is compliant but not applicable by the pattern
	 * @param constraintGenerators List of constraint generators that may attempt the differentiation
	 * @return If the differentiation was successful: list of specification proposals that would fulfill the specification
	 */
	public ArrayList<SpecificationProposal> differentiate(ISentence intruder, ArrayList<IConstraintGenerator> constraintGenerators);
	
	/**
	 * Only for incremental sentence structures: attempt to increase the structures precision by adding more nodes
	 * @param intruder The sentence, that is compliant but not applicable by the pattern
	 * @param maintainIntruder True, if the intruder is also causal and deserves an own pattern, false if it is a non-causal intruder
	 * @return If the specification was successful: list of specification proposals that would fulfill the specification
	 */
	public ArrayList<SpecificationProposal> specifyVersus(ISentence intruder, boolean maintainIntruder);
	
	/*
	 * Reconsiders the position of all constraints by moving them as far down as possible. This becomes applicable,
	 * when the sentence structure has been specified in an incremental manner
	 */
	public abstract void reevaluateConstraints();
	
	/**
	 * Returns the first sentence that has been accepted by this pattern and will always remain accepted
	 * @return First accepted sentence of this pattern
	 */
	public ISentence getPrime();
	
	/**
	 * Create an exact copy of this pattern
	 * @return Copy of this pattern
	 */
	public IPattern clone();
	
	/**
	 * Gets the causality pattern in a human-readable form
	 * @return Causality pattern in a human-readable form
	 */
	@Override
	public String toString();
}
